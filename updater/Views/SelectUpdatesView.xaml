<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:CoApp_Updater_Controls="clr-namespace:CoApp.Updater.Controls"
     xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
    xmlns:Views="clr-namespace:CoApp.Updater.Views" xmlns:Support="clr-namespace:CoApp.Updater.Support"
    xmlns:Support1="clr-namespace:CoApp.Gui.Toolkit.Support;assembly=CoApp.Gui.Toolkit" mc:Ignorable="d"
    x:Class="CoApp.Updater.Views.SelectUpdatesView"
    x:Name="MainSelectUpdateView"
    d:DesignWidth="1024" d:DesignHeight="768" d:DataContext="{d:DesignData /SampleData/SelectUpdatesViewModelSampleData.xaml}">
    <!--DataContext="{Binding SelectUpdateViewModel, Source={StaticResource Locator}}" Title="{Binding Title}"-->
    <UserControl.Resources>
        <ControlTemplate x:Key="ListViewItemTemplateForSelecting" TargetType="{x:Type ListViewItem}">
            <Border x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                <Grid>
                    <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Columns="{TemplateBinding GridView.ColumnCollection}">
                        <GridViewRowPresenter.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="{Binding ElementName=MainSelectUpdateView}" CommandParameter="{Binding}" Header="Block"/>
                            </ContextMenu>
                        </GridViewRowPresenter.ContextMenu>
                    </GridViewRowPresenter>
                    <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                    <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="true">
                    <Setter TargetName="Bd" Property="BorderBrush" Value="#FF143c65" />
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource AccentColorBrush}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="Bd" Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{DynamicResource AccentColor3}" />
                        </Setter.Value>
                    </Setter>

                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd">
                        <Setter.Value>
                            <SolidColorBrush Color="{DynamicResource AccentColor2}" />
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="#FF143c65" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>
        <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Border.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Block" Command="{Binding RelativeSource={RelativeSource TemplatedParent,  diagnostics:PresentationTraceSources.TraceLevel=High},  diagnostics:PresentationTraceSources.TraceLevel=High}" CommandParameter="{Binding}"/>
                                </ContextMenu>
                            </Border.ContextMenu>
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
          
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                    
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style  TargetType="{x:Type GridViewColumnHeader}">
        	<Setter Property="HorizontalContentAlignment" Value="Left" />
        	<Setter Property="VerticalContentAlignment" Value="Center" />
        	<Setter Property="Padding" Value="4 2 4 2" />
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
        				<Grid>
        					<Rectangle Fill="Transparent" IsHitTestVisible="True" />
        					<Border x:Name="HeaderBorder"
        						Padding="{TemplateBinding Padding}">
        						<ContentPresenter x:Name="HeaderContent"
        							Content="{TemplateBinding Content}"
        							TextBlock.FontWeight="SemiBold"
        							Margin="0,0,0,1"
        							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        							RecognizesAccessKey="True"
        							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource Grey3}" />
        						<Setter TargetName="HeaderContent" Property="Margin" Value="1,1,0,0" />
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	<Style.Triggers>
        		<Trigger Property="Role" Value="Floating">
        			<Setter Property="Opacity" Value="0.7" />
        			<Setter Property="Template">
        				<Setter.Value>
        					<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
        						<Canvas x:Name="PART_FloatingHeaderCanvas">
        							<Rectangle Fill="#60000000"
        								Width="{TemplateBinding ActualWidth}"
        								Height="{TemplateBinding ActualHeight}" />
        						</Canvas>
        					</ControlTemplate>
        				</Setter.Value>
        			</Setter>
        		</Trigger>
        		<!--<Trigger Property="Role"
               Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Border Name="HeaderBorder"
                                      BorderThickness="0,0,0,1"
                                      BorderBrush="{DynamicResource HighlightBrush}"  />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>-->
        	</Style.Triggers>
        </Style>
		
		

		
    </UserControl.Resources>
	
        <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Border BorderBrush="Black" BorderThickness="0,2" Grid.Row="0" Grid.Column="0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Border BorderThickness="1,0,0,0" BorderBrush="#FFD0D0D0" Grid.Column="1" DataContext="{Binding ElementName=ProductElement, Path=SelectedItem.Product, Mode=OneWay}">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="#FFBBD9F0" Offset="1"/>
                        </LinearGradientBrush>
                    </Border.Background>
                    <StackPanel Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <TextBlock  Text="{Binding DisplayName}" FontWeight="Bold" Margin="0,0,0,12"/>
                        <TextBlock Margin="0,0,0,15"  TextWrapping="Wrap" Text="{Binding Summary}"/>
                        <StackPanel  Margin="0,0,0,15" Orientation="Horizontal">
                            <TextBlock Text="Published: " FontWeight="Bold"/>
                            <TextBlock Text="{Binding UpdateTime}"/>
                        </StackPanel>
                        
                        <StackPanel Margin="0,0,0,15" Orientation="Horizontal">
                            <TextBlock Text="Also requires updates to: " FontWeight="Bold"/>
                            <TextBlock Support1:TextBlockExtensions.InlinesList="{Binding Path=DependenciesThatNeedToUpdate, Converter={StaticResource CommaConverter1}, PresentationTraceSources.TraceLevel=High}" TextWrapping="Wrap"/>
                        </StackPanel>
                        
                    </StackPanel>
                </Border>

                <ListView HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0"  SelectedIndex="0" ItemsSource="{Binding Products.View, PresentationTraceSources.TraceLevel=High}"
                          x:Name="ProductElement" BorderThickness="0" SelectionMode="Single"> <!--Support:GridViewColumnResize.Enabled="True">-->
                   
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="Template" Value="{StaticResource ListViewItemTemplateForSelecting}"/>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.GroupStyle>
                        <GroupStyle>
                            <GroupStyle.HeaderTemplate>
                                <DataTemplate>
                                    <TextBlock FontWeight="Bold" FontSize="15"
                                        Text="{Binding Path=Name}"/>
                                </DataTemplate>
                            </GroupStyle.HeaderTemplate>
                        </GroupStyle>
                    </ListView.GroupStyle>
                    <ListView.View>
                        <GridView AllowsColumnReorder="False" >
                            
                            <GridViewColumn Width="Auto">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox IsChecked="{Binding IsSelected}"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Path=Product.DisplayName, Mode=OneWay}"> <!--Support:GridViewColumnResize.Width="*">-->
                                
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                    
                </ListView>
                
<!--
                <DataGrid HeadersVisibility="Column" CanUserResizeRows="False" 
                          CanUserResizeColumns="False" CanUserReorderColumns="False" GridLinesVisibility="None" Background="Transparent" CanUserSortColumns="True" 
                          ItemsSource="{Binding Products}"  SelectedIndex="0" CanUserAddRows="False" CanUserDeleteRows="False"
                          x:Name="ProductElement" RowBackground="Transparent" AutoGenerateColumns="False" SelectionMode="Single" IsSynchronizedWithCurrentItem="True" EnableRowVirtualization="False">
                   <DataGrid.CellStyle>
                        <Style TargetType="{x:Type DataGridCell}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu>
                                        <MenuItem Header="Block" Command="{Binding Path=ViewModel.BlockProduct}" CommandParameter="{Binding}"/>
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>

                                </Trigger>
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        
                    </DataGrid.CellStyle>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Width="Auto" Binding="{Binding Path=IsSelected}"/>-->
                       <!--<DataGridTemplateColumn Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <CheckBox IsChecked="{Binding Path=IsSelected, Mode=TwoWay, PresentationTraceSources.TraceLevel=High}"  Margin="0"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Header="Name" Width="*" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid HorizontalAlignment="Stretch">
                                 
                                    <TextBlock Text="{Binding Path=Product.DisplayName, Mode=OneWay}"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                    </DataGrid.Columns>
                    
                </DataGrid>
            -->
            </Grid>
        </Border>
        <StackPanel Grid.Row="1">
            <Button Content="Save Selections" HorizontalAlignment="Right" Margin="0,10,18,10" Command="{Binding Save}" Style="{DynamicResource Windows8ButtonStyle}"/>
            
        </StackPanel>
    </Grid>
</UserControl>