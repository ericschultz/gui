<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:CoApp.Updater.Controls"
                    xmlns:Controls1="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    
                    xmlns:Support="clr-namespace:CoApp.Updater.Support"
                    xmlns:Controls2="clr-namespace:CoApp.Gui.Toolkit.Controls;assembly=CoApp.Gui.Toolkit"
                    xmlns:Converters1="clr-namespace:CoApp.Gui.Toolkit.Support.Converters;assembly=CoApp.Gui.Toolkit">

    <Converters1:NullEmptyStringToVisibilityConverter x:Key="NullEmptyStringToVisibilityConverter1"/>
    <BooleanToVisibilityConverter x:Key="boolToVisConverter"/>

    <Converters1:InvertBooleanConverter x:Key="invertConverter"/>
    

    <Style TargetType="{x:Type Border}" x:Key="BorderStyle">
        <Setter Property="BorderBrush" Value="#FFB2B2B2"/>
        <Setter  Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,0,0,20"   />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="Title">
        <Setter Property="FontFamily" Value="{StaticResource HeaderFontFamily}"/>
        <Setter Property="FontSize" Value="40"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>



    <Style x:Key="BackButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40 "/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Margin" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Canvas>
                        <!-- fill is needed so the click is actually caught in the transparent regions -->
                        <Ellipse Width="40" Height="40" Stroke="Black" Fill="Transparent"/>

                        <Canvas Width="40" Height="40" Canvas.Left="20.667" Canvas.Top="27.5" >

                            <Canvas.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="0.40" ScaleX="0.40"/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="179.547"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Canvas.RenderTransform>
                            <Path Fill="Black" StrokeThickness="1"  StrokeMiterLimit="10" StrokeLineJoin="Round" Data="F1 M0.64426238,10.744088 L49.318571,11.101961 49.281571,17.092961 0.5,17.310553 0.64426238,10.744088 z M32.893571,0.91696081 L55.254571,14.135961 32.720571,27.061961 32.720571,27.061961 C31.280571,27.884961 29.441571,27.390961 28.616571,25.959961 27.791571,24.521961 28.286571,22.694961 29.726571,21.862961 L29.726571,21.862961 47.802571,11.497961 47.772571,16.673961 29.832571,6.0759608 29.832571,6.0759608 C28.406571,5.2299608 27.934571,3.3949608 28.781571,1.9719608 29.621571,0.54296081 31.467571,0.077960811 32.893571,0.91696081 L32.893571,0.91696081 z" Height="50.995" Canvas.Left="-25.224" Canvas.Top="-4.992" Width="60.559" Stretch="Fill"/>
                            <Canvas/>
                            <Canvas/>
                        </Canvas>


                    </Canvas>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Color x:Key="Windows8DialogButtonBg">#FF008287</Color>
    <SolidColorBrush x:Key="Windows8DialogButtonBgBrush" Color="{StaticResource Windows8DialogButtonBg}"/>

    <Color x:Key="Windows8DisabledButtonFg">#FF9D9D9D</Color>
    <SolidColorBrush x:Key="Windows8DisabledButtonFgBrush" Color="{StaticResource Windows8DisabledButtonFg}"/>

    <Color x:Key="Windows8DisabledButtonBg">#FFEAEAEA</Color>
    <SolidColorBrush x:Key="Windows8DisabledButtonBgBrush" Color="{StaticResource Windows8DisabledButtonBg}"/>

    <Color x:Key="Windows8DialogButtonFg">#FFEDF7F7</Color>
    <SolidColorBrush x:Key="Windows8DialogButtonFgBrush" Color="{StaticResource Windows8DialogButtonFg}"/>

    <Color x:Key="Windows8DialogButtonOverBg">#FF219297</Color>
    <SolidColorBrush x:Key="Windows8DialogButtonOverBgBrush" Color="{StaticResource Windows8DialogButtonOverBg}"/>

    <Style x:Key="Windows8DialogButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="21"/>
        <Setter Property="Background" Value="{StaticResource Windows8DialogButtonBgBrush}" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="{StaticResource Windows8DialogButtonFgBrush}" />
        <Setter Property="Padding" Value="29,12" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleBlack">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleWhite">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="PART_Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" OpacityMask="{x:Null}" TextBlock.FontSize="21"  SnapsToDevicePixels="True"/>
                        </Border>
                        <Rectangle Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="White" SnapsToDevicePixels="True" x:Name="FocusRectangleWhite" Opacity="0"/>
                        <Rectangle x:Name="FocusRectangleBlack" Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 1" SnapsToDevicePixels="True" Opacity="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Windows8DisabledButtonFgBrush}" />
                            <Setter Property="Background" Value="{StaticResource Windows8DisabledButtonBgBrush}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
                        </Trigger>
                        
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Windows8DialogButtonOverBgBrush}"/>
                        </Trigger>
                        
    

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Color x:Key="Windows8ButtonBg1">#FFCCCCCC</Color>
    <SolidColorBrush x:Key="Windows8ButtonBgBrush1" Color="{DynamicResource Windows8ButtonBg1}" />

    <Color x:Key="Windows8ButtonOverBg">#FFD8D8D8</Color>
    <SolidColorBrush x:Key="Windows8ButtonOverBgBrush" Color="{DynamicResource Windows8ButtonOverBg}" />

    <SolidColorBrush x:Key="MyWhiteBrush">#FFFFFFFF</SolidColorBrush>

    <Style x:Key="Windows8ButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Background" Value="{StaticResource Windows8ButtonBgBrush1}" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Padding" Value="29,12" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FontSize" Value="21"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleBlack">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleWhite">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"
                                TextBlock.Foreground="{TemplateBinding Foreground}">
                            <ContentPresenter x:Name="contentPresenter"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" OpacityMask="{x:Null}" TextBlock.FontSize="{TemplateBinding FontSize}"  SnapsToDevicePixels="True" 
                                              />
                        </Border>
                        <Rectangle Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="White" SnapsToDevicePixels="True" x:Name="FocusRectangleWhite" Opacity="0"/>
                        <Rectangle x:Name="FocusRectangleBlack" Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 1" SnapsToDevicePixels="True" Opacity="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Windows8DisabledButtonFgBrush}" />
                            <Setter Property="Background" Value="{DynamicResource Windows8DisabledButtonBgBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Windows8ButtonOverBgBrush}"/>

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource MyWhiteBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>

                        </Trigger>





                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style BasedOn="{StaticResource Windows8ButtonStyle}" TargetType="Button"/>



    <Style BasedOn="{StaticResource Windows8ButtonStyle}" TargetType="Controls2:ElevateButton" x:Key="Windows8ElevateButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls2:ElevateButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <!--
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource Windows8ButtonOverBgBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <!--
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                <EasingThicknessKeyFrame KeyTime="0" Value="2"/>
                                            </ThicknessAnimationUsingKeyFrames>-->
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <!--
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource BlackBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource WhiteBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>-->
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <!--
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource Windows8DisabledButtonBgBrush}"	/>
                                        </ObjectAnimationUsingKeyFrames>-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleBlack">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleWhite">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"
                                TextBlock.Foreground="{TemplateBinding Foreground}">
                            <StackPanel Orientation="Horizontal" Margin="{TemplateBinding Padding}" >
                                <Controls2:ElevateShield Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{TemplateBinding MustElevate, Converter={StaticResource boolToVisConverter}}"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  
                                                  TextBlock.FontSize="21"  SnapsToDevicePixels="True" />
                            </StackPanel>
                        </Border>
                        <Rectangle Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="White" SnapsToDevicePixels="True" x:Name="FocusRectangleWhite" Opacity="0"/>
                        <Rectangle x:Name="FocusRectangleBlack" Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 1" SnapsToDevicePixels="True" Opacity="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Windows8DisabledButtonFgBrush}" />
                            <Setter Property="Background" Value="{DynamicResource Windows8DisabledButtonBgBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Windows8ButtonOverBgBrush}"/>

                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource MyWhiteBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>

                        </Trigger>

                        <DataTrigger Binding="{Binding MustElevate, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter Property="Command" Value="{Binding UnelevatedCommand, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MustElevate, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter Property="Command" Value="{Binding ElevatedCommand, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </DataTrigger>



                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style BasedOn="{StaticResource Windows8ElevateButtonStyle}" TargetType="Controls2:ElevateButton" x:Key="Windows8DialogElevateButtonStyle">
        <Setter Property="Background" Value="{StaticResource Windows8DialogButtonBgBrush}" />
        <Setter Property="Foreground" Value="{StaticResource Windows8DialogButtonFgBrush}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls2:ElevateButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleBlack">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusRectangleWhite">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="PART_Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">

                            <StackPanel Orientation="Horizontal" Margin="{TemplateBinding Padding}"  VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Controls2:ElevateShield Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{TemplateBinding MustElevate, Converter={StaticResource boolToVisConverter}}"/>
                                <ContentPresenter x:Name="contentPresenter"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" OpacityMask="{x:Null}" TextBlock.FontSize="21"  SnapsToDevicePixels="True" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                            </StackPanel>
                        </Border>
                        <Rectangle Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="White" SnapsToDevicePixels="True" x:Name="FocusRectangleWhite" Opacity="0"/>
                        <Rectangle x:Name="FocusRectangleBlack" Margin="4" Fill="{x:Null}" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 1" SnapsToDevicePixels="True" Opacity="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Windows8DisabledButtonFgBrush}" />
                            <Setter Property="Background" Value="{StaticResource Windows8DisabledButtonBgBrush}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource Windows8DialogButtonOverBgBrush}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding MustElevate, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter Property="Command" Value="{Binding UnelevatedCommand, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MustElevate, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter Property="Command" Value="{Binding ElevatedCommand, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource Windows8ElevateButtonStyle}" TargetType="Controls2:ElevateButton"/>


    <Style TargetType="{x:Type Controls2:DialogBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls2:DialogBox}">
                    <Grid Background="#B15A5A5A">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="400"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto" MinHeight="215"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Background="White" Grid.Row="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="680"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="1">
                                    <Grid.Resources>
                                        <DataTemplate DataType="{x:Type Controls2:ElevateButtonDescription}">
                                            <Controls2:ElevateButton UnelevatedCommand="{Binding Command}" CommandParameter="{Binding CommandParameter}" CommandTarget="{Binding CommandTarget}" Content="{Binding Title}" Margin="20,0,0,0" MustElevate="True" HorizontalAlignment="Right" Style="{StaticResource Windows8DialogElevateButtonStyle}" VerticalAlignment="Bottom"/>
                                        </DataTemplate>
                                        <DataTemplate DataType="{x:Type Controls2:ButtonDescription}">
                                            <Button Content="{Binding Title}" Command="{Binding Command}" CommandParameter="{Binding CommandParameter}" CommandTarget="{Binding CommandTarget}" Margin="20,0,0,0" HorizontalAlignment="Right" Style="{StaticResource Windows8DialogButtonStyle}" VerticalAlignment="Bottom" IsCancel="{Binding IsCancel}"/>
                                        </DataTemplate>
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Row="0" Style="{DynamicResource Title}" Padding="0,20, 0, 20 " Text="{TemplateBinding Title}"/>
                                    <ContentControl Content="{TemplateBinding Content}"  Grid.Row="1" FontFamily="{DynamicResource HeaderFontFamily}" FontSize="18" >
                                        <ContentControl.Resources>
                                            <DataTemplate DataType="{x:Type System:String}">
                                                <TextBlock TextWrapping="Wrap" Text="{Binding}"/>
                                            </DataTemplate>
                                            <DataTemplate DataType="{x:Type Support:StringList}">
                                                <ItemsControl ItemsSource="{Binding}"/>
                                            </DataTemplate>
                                        </ContentControl.Resources>
                                    </ContentControl>

                                    <TextBlock TextWrapping="Wrap"  Grid.Row="1" FontFamily="{DynamicResource HeaderFontFamily}" FontSize="18" Text="{TemplateBinding Content}"/>
                                    <ItemsControl Grid.Row="2" ItemsSource="{TemplateBinding ButtonDescriptions}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0, 30, 0, 30" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </Grid>
                            </Grid>
                        </Grid>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ChromelessLinkButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="#02FFFFFF" />
        <Setter Property="Foreground"
                Value="Blue" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="TextBlock.TextDecorations" Value="None"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                           >
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextDecorations" Value="None" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="TextDecorations" Value="Underline"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--
    <Style TargetType="Controls:UnblockControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Controls:UnblockControl">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{TemplateBinding Title}" Grid.Column="1" VerticalAlignment="Center"/>

                        <TextBlock Text="Waiting On Unblock" x:Name="Waiting" VerticalAlignment="Center" HorizontalAlignment="Right" Grid.Column="1" Visibility="Collapsed"/>
                        <Controls:ElevateButton VerticalAlignment="Center" HorizontalAlignment="Right" Grid.Column="1" MustElevate="{TemplateBinding MustElevate}" Content="Unblock" 
                                                ElevatedCommand="{TemplateBinding ElevatedCommand}" UnelevatedCommand="{TemplateBinding UnelevatedCommand}" x:Name="ElevateButton"/>
                        <Button Style="{DynamicResource ChromelessLinkButtonStyle}" Content="An Error Occurred" 
                                Command="{TemplateBinding ShowError}" x:Name="ErrorButton" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Right" Grid.Column="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{TemplateBinding WaitingOnUnblock}" Value="true">
                            <Setter Property="Visibility" TargetName="ElevateButton" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ErrorButton" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Waiting" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{TemplateBinding InError}" Value="true">
                            <Setter Property="Visibility" TargetName="ElevateButton" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ErrorButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Waiting" Value="Collapsed"/>
                        </DataTrigger>
                        
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{TemplateBinding InError}" Value="false"/>
                                <Condition Binding="{TemplateBinding WaitingOnUnblock}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ElevateButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ErrorButton" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Waiting" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
            
    </Style>
-->
    <Controls1:WidthPercentageConverter x:Key="WidthPercentageConverter"/>
    <CircleEase EasingMode="EaseIn" x:Key="ProgressBarEaseIn"/>

    <CircleEase EasingMode="EaseIn" x:Key="ProgressBarEaseOut" />
    <Style x:Key="ProgressBarStyleTest" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground"
            Value="{DynamicResource HighlightBrush}" />
        <Setter Property="Background"
            Value="{DynamicResource GrayBrush4}" />
        <Setter Property="Maximum"
            Value="100" />
        <Setter Property="Height"
            Value="10" />
        <Setter Property="IsTabStop"
            Value="False" />
        
        <Setter Property="BorderBrush"
            Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="Root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever" Duration="00:00:04.4">
                                        
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.0" Storyboard.TargetProperty="(Controls:PercentTransform.PercentFromLeft)" Storyboard.TargetName="R1TT">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value=".32" EasingFunction="{StaticResource ProgressBarEaseOut}" />
                                            <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value=".65" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.2" Storyboard.TargetProperty="(Controls:PercentTransform.PercentFromLeft)" Storyboard.TargetName="R2TT">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value=".32" EasingFunction="{StaticResource ProgressBarEaseOut}" />
                                            <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value=".65" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.4" Storyboard.TargetProperty="(Controls:PercentTransform.PercentFromLeft)" Storyboard.TargetName="R3TT">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value=".32" EasingFunction="{StaticResource ProgressBarEaseOut}" />
                                            <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value=".65" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.6" Storyboard.TargetProperty="(Controls:PercentTransform.PercentFromLeft)" Storyboard.TargetName="R4TT">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value=".32" EasingFunction="{StaticResource ProgressBarEaseOut}" />
                                            <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value=".65" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.8" Storyboard.TargetProperty="(Controls:PercentTransform.PercentFromLeft)" Storyboard.TargetName="R5TT">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value=".32" EasingFunction="{StaticResource ProgressBarEaseOut}" />
                                            <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value=".65" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="R1">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="R2">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="R3">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.6" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="R4">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.8" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="R5">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="PART_Track"
                            Background="{TemplateBinding Background}" />
                        <Grid x:Name="ProgressBarRootGrid">
                            <Grid VerticalAlignment="Stretch" Margin="0" HorizontalAlignment="Left" x:Name="IndeterminateRoot" >
                                <Ellipse Fill="{DynamicResource  Windows8DialogButtonBgBrush}" VerticalAlignment="Center" IsHitTestVisible="False" Width="6" x:Name="R1" HorizontalAlignment="Left" MinHeight="6" MinWidth="6">
                                    
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="R1TT" Controls:PercentTransform.OuterWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <Ellipse Fill="{DynamicResource  Windows8DialogButtonBgBrush}" VerticalAlignment="Center" IsHitTestVisible="False" Width="6" x:Name="R2" HorizontalAlignment="Left"  MinHeight="6" MinWidth="6" >
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="R2TT" Controls:PercentTransform.OuterWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <Ellipse Fill="{DynamicResource  Windows8DialogButtonBgBrush}" VerticalAlignment="Center" IsHitTestVisible="False" Width="6" x:Name="R3" HorizontalAlignment="Left"  MinHeight="6" MinWidth="6" >
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="R3TT" Controls:PercentTransform.OuterWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <Ellipse Fill="{DynamicResource  Windows8DialogButtonBgBrush}" VerticalAlignment="Center" IsHitTestVisible="False" Width="6" x:Name="R4" HorizontalAlignment="Left"  MinHeight="6" MinWidth="6" >
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="R4TT" Controls:PercentTransform.OuterWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <Ellipse Fill="{DynamicResource  Windows8DialogButtonBgBrush}" VerticalAlignment="Center" IsHitTestVisible="False" Width="6" x:Name="R5" HorizontalAlignment="Left"  MinHeight="6" MinWidth="6" >
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="R5TT" Controls:PercentTransform.OuterWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Grid>
                            <Grid x:Name="DeterminateRoot">
                                <Border x:Name="PART_Indicator"
                                    Background="{DynamicResource  Windows8DialogButtonBgBrush}"
                                    HorizontalAlignment="Left">
                                    <Rectangle x:Name="GradientFill"
                                        Opacity="0.7"
                                        Visibility="Collapsed">
                                        
                                    </Rectangle>
                                </Border>
                            </Grid>
                        </Grid>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation"
                            Value="Vertical">
                            <Setter Property="LayoutTransform"
                                TargetName="Root">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate"
                            Value="true">
                            <Setter Property="Visibility"
                                TargetName="IndeterminateRoot"
                                Value="Visible" />
                            <Setter Property="Visibility"
                                TargetName="DeterminateRoot"
                                Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Track" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  <Converters1:NullToBooleanConverter x:Key="NullToBooleanConverter1" />
  <Converters1:UrlToBooleanConverter x:Key="UrlToBooleanConverter1" />
</ResourceDictionary>